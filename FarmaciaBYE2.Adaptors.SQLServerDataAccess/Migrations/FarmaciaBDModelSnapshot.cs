// <auto-generated />
using System;
using FarmaciaBYE2.Adaptors.SQLServerDataAccess.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FarmaciaBYE2.Adaptors.SQLServerDataAccess.Migrations
{
    [DbContext(typeof(FarmaciaBD))]
    partial class FarmaciaBDModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("FarmaciaBYE2.Core.Domain.Models.Carrito", b =>
                {
                    b.Property<Guid>("ID_Carrito")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID_Carrito");

                    b.ToTable("tb_Carrito");
                });

            modelBuilder.Entity("FarmaciaBYE2.Core.Domain.Models.Descuentos", b =>
                {
                    b.Property<Guid>("ID_Descuento")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FarmaciaID_Farmacia")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Funcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ID_Pedido")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nombre_Medicamento")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID_Descuento");

                    b.HasIndex("FarmaciaID_Farmacia");

                    b.ToTable("tb_Descuentos");
                });

            modelBuilder.Entity("FarmaciaBYE2.Core.Domain.Models.Farmacia", b =>
                {
                    b.Property<Guid>("ID_Farmacia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Cantidad_empleados")
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ID_Medicamento")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_Medicamento_C")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_Pedido")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MedicamentosID_Medicamento")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID_Farmacia");

                    b.HasIndex("MedicamentosID_Medicamento");

                    b.ToTable("tb_Farmacia");
                });

            modelBuilder.Entity("FarmaciaBYE2.Core.Domain.Models.FarmaciaProveedor", b =>
                {
                    b.Property<Guid>("ID_Proveedor")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_Farmacia")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID_Proveedor", "ID_Farmacia");

                    b.HasIndex("ID_Farmacia");

                    b.ToTable("tb_FarmaciaProveedor");
                });

            modelBuilder.Entity("FarmaciaBYE2.Core.Domain.Models.MedicamentoCarrito", b =>
                {
                    b.Property<Guid>("ID_Carrito")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_Medicamento")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MedicamentoID_Medicamento")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID_Carrito", "ID_Medicamento");

                    b.HasIndex("ID_Medicamento");

                    b.HasIndex("MedicamentoID_Medicamento");

                    b.ToTable("tb_MedicamentoCarrito");
                });

            modelBuilder.Entity("FarmaciaBYE2.Core.Domain.Models.Medicamentos", b =>
                {
                    b.Property<Guid>("ID_Medicamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Codigo")
                        .HasColumnType("int");

                    b.Property<Guid?>("FarmaciaID_Farmacia")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Funcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ID_Descuento")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_Medicamentos_C")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ID_Pedido")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID_Medicamento");

                    b.HasIndex("FarmaciaID_Farmacia");

                    b.HasIndex("ID_Descuento");

                    b.ToTable("tb_Medicamentos");
                });

            modelBuilder.Entity("FarmaciaBYE2.Core.Domain.Models.Pedido", b =>
                {
                    b.Property<Guid>("ID_Pedido")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_Descuento")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_Farmacia")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_Medicamento")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_Usuario")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Medicamento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MedicamentosID_Medicamento")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioID_Usuario")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID_Pedido");

                    b.HasIndex("MedicamentosID_Medicamento");

                    b.HasIndex("UsuarioID_Usuario");

                    b.ToTable("tb_Pedido");
                });

            modelBuilder.Entity("FarmaciaBYE2.Core.Domain.Models.Proveedor", b =>
                {
                    b.Property<Guid>("ID_Proveedor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Codigo_Proveedor")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID_Proveedor");

                    b.ToTable("tb_Proveedor");
                });

            modelBuilder.Entity("FarmaciaBYE2.Core.Domain.Models.Usuario", b =>
                {
                    b.Property<Guid>("ID_Usuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Apellido")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Telefono")
                        .HasColumnType("int");

                    b.HasKey("ID_Usuario");

                    b.ToTable("tb_Usuario");
                });

            modelBuilder.Entity("FarmaciaBYE2.Core.Domain.Models.UsuarioPedido", b =>
                {
                    b.Property<int>("ID_Usuario")
                        .HasColumnType("int");

                    b.Property<int>("ID_Pedido")
                        .HasColumnType("int");

                    b.Property<Guid>("ID_UP")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PedidosID_Pedido")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuariosID_Usuario")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID_Usuario", "ID_Pedido");

                    b.HasIndex("PedidosID_Pedido");

                    b.HasIndex("UsuariosID_Usuario");

                    b.ToTable("tb_UsuarioPedido");
                });

            modelBuilder.Entity("FarmaciaBYE2.Core.Domain.Models.Descuentos", b =>
                {
                    b.HasOne("FarmaciaBYE2.Core.Domain.Models.Farmacia", null)
                        .WithMany("Descuentos")
                        .HasForeignKey("FarmaciaID_Farmacia");

                    b.HasOne("FarmaciaBYE2.Core.Domain.Models.Pedido", "Pedidos")
                        .WithMany("Descuento")
                        .HasForeignKey("ID_Descuento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("FarmaciaBYE2.Core.Domain.Models.Farmacia", b =>
                {
                    b.HasOne("FarmaciaBYE2.Core.Domain.Models.Medicamentos", "Medicamentos")
                        .WithMany()
                        .HasForeignKey("MedicamentosID_Medicamento");

                    b.Navigation("Medicamentos");
                });

            modelBuilder.Entity("FarmaciaBYE2.Core.Domain.Models.FarmaciaProveedor", b =>
                {
                    b.HasOne("FarmaciaBYE2.Core.Domain.Models.Farmacia", "Farmacias")
                        .WithMany("FarmaciaProveedor")
                        .HasForeignKey("ID_Farmacia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmaciaBYE2.Core.Domain.Models.Proveedor", "Proveedor")
                        .WithMany("FarmaciaProveedor")
                        .HasForeignKey("ID_Proveedor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farmacias");

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("FarmaciaBYE2.Core.Domain.Models.MedicamentoCarrito", b =>
                {
                    b.HasOne("FarmaciaBYE2.Core.Domain.Models.Carrito", "Carrito")
                        .WithMany("MedicamentoCarrito")
                        .HasForeignKey("ID_Medicamento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmaciaBYE2.Core.Domain.Models.Medicamentos", "Medicamento")
                        .WithMany("MedicamentoCarrito")
                        .HasForeignKey("MedicamentoID_Medicamento");

                    b.Navigation("Carrito");

                    b.Navigation("Medicamento");
                });

            modelBuilder.Entity("FarmaciaBYE2.Core.Domain.Models.Medicamentos", b =>
                {
                    b.HasOne("FarmaciaBYE2.Core.Domain.Models.Farmacia", null)
                        .WithMany("Medicamento")
                        .HasForeignKey("FarmaciaID_Farmacia");

                    b.HasOne("FarmaciaBYE2.Core.Domain.Models.Descuentos", "Descuentos")
                        .WithMany("Medicamento")
                        .HasForeignKey("ID_Descuento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Descuentos");
                });

            modelBuilder.Entity("FarmaciaBYE2.Core.Domain.Models.Pedido", b =>
                {
                    b.HasOne("FarmaciaBYE2.Core.Domain.Models.Farmacia", "Farmacia")
                        .WithMany("Pedidos")
                        .HasForeignKey("ID_Pedido")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmaciaBYE2.Core.Domain.Models.Medicamentos", "Medicamentos")
                        .WithMany()
                        .HasForeignKey("MedicamentosID_Medicamento");

                    b.HasOne("FarmaciaBYE2.Core.Domain.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioID_Usuario");

                    b.Navigation("Farmacia");

                    b.Navigation("Medicamentos");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("FarmaciaBYE2.Core.Domain.Models.UsuarioPedido", b =>
                {
                    b.HasOne("FarmaciaBYE2.Core.Domain.Models.Pedido", "Pedidos")
                        .WithMany("UsuarioPedido")
                        .HasForeignKey("PedidosID_Pedido");

                    b.HasOne("FarmaciaBYE2.Core.Domain.Models.Usuario", "Usuarios")
                        .WithMany("UsuarioPedido")
                        .HasForeignKey("UsuariosID_Usuario");

                    b.Navigation("Pedidos");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("FarmaciaBYE2.Core.Domain.Models.Carrito", b =>
                {
                    b.Navigation("MedicamentoCarrito");
                });

            modelBuilder.Entity("FarmaciaBYE2.Core.Domain.Models.Descuentos", b =>
                {
                    b.Navigation("Medicamento");
                });

            modelBuilder.Entity("FarmaciaBYE2.Core.Domain.Models.Farmacia", b =>
                {
                    b.Navigation("Descuentos");

                    b.Navigation("FarmaciaProveedor");

                    b.Navigation("Medicamento");

                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("FarmaciaBYE2.Core.Domain.Models.Medicamentos", b =>
                {
                    b.Navigation("MedicamentoCarrito");
                });

            modelBuilder.Entity("FarmaciaBYE2.Core.Domain.Models.Pedido", b =>
                {
                    b.Navigation("Descuento");

                    b.Navigation("UsuarioPedido");
                });

            modelBuilder.Entity("FarmaciaBYE2.Core.Domain.Models.Proveedor", b =>
                {
                    b.Navigation("FarmaciaProveedor");
                });

            modelBuilder.Entity("FarmaciaBYE2.Core.Domain.Models.Usuario", b =>
                {
                    b.Navigation("UsuarioPedido");
                });
#pragma warning restore 612, 618
        }
    }
}
